// Place your settings in this file to overwrite the default settings
{
  "code-eol.newlineCharacter": "¬",
  "code-eol.returnCharacter": "¤",
  "code-eol.crlfCharacter": "¤¬",
  // emmet
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "html.eex": "html"
  },
  // formatting
  "[pythonn]": {
    "editor.formatOnSave": true,
    "python.linting.pylintArgs": [
      "--indent-string=\"  \""
    ]
  },
  "[powershell]": {
    "editor.formatOnSave": false
  },
  "[handlebars]": {
    "editor.formatOnSave": false
  },
  "[scss]": {
    "editor.formatOnSave": true
  },
  "[javascript]": {
    "editor.formatOnSave": false
  },
  "[javascriptreact]": {
    "editor.formatOnSave": false
  },
  "[typescript]": {
    "editor.formatOnSave": false,
  },
  "[typescriptreact]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "editor.codeActionsOnSave": {
    "source.fixAll.tslint": true
  },
  // excluding folders
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/flow-typed": true,
    "**/_build": true,
    "**/deps": true
  },
  "files.associations": {
    "*.json": "jsonc",
    "*.side": "jsonc"
  },
  "files.trimTrailingWhitespace": true,
  "git.detectSubmodules": false,
  "git.detectSubmodulesLimit": 9999,
  // window Setting
  "window.titleBarStyle": "custom",
  "window.zoomLevel": 0,
  "window.title": "${dirty} ${activeEditorMedium}${separator}${rootName}",
  "workbench.iconTheme": "vs-seti",
  "workbench.colorTheme": "GitHub Light",
  "workbench.statusBar.visible": true,
  "workbench.activityBar.visible": true,
  "workbench.editor.showIcons": false,
  "workbench.editor.tabSizing": "shrink",
  "workbench.editor.tabCloseButton": "left",
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.sideBar.location": "left",
  "explorer.confirmDelete": false,
  // Editor
  "editor.rulers": [
    80,
    120
  ],
  "editor.snippetSuggestions": "top",
  "editor.cursorBlinking": "solid",
  "editor.lineHeight": 27,
  "editor.lineNumbers": "on",
  "editor.fontLigatures": false,
  "editor.fontFamily": "'Cascadia Code', 'Fira Code Retina', Consolas, 'Courier New', monospace",
  "editor.renderWhitespace": "all",
  "editor.detectIndentation": false,
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.tabCompletion": "onlySnippets",
  "editor.suggest.localityBonus": true,
  "editor.matchBrackets": "always",
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
  "editor.tabSize": 2,
  "editor.glyphMargin": false,
  "editor.folding": false, // I what to see all
  "editor.occurrencesHighlight": true,
  "editor.renderLineHighlight": "all",
  "editor.minimap.enabled": false,
  // "javascript.validate.enable": false,
  // "editor.suggestOnTriggerCharacters": false,
  // "editor.quickSuggestions": false,
  // misc stuff
  "breadcrumbs.enabled": false, // Still taking up space
  "explorer.openEditors.visible": 0,
  "typescript.referencesCodeLens.enabled": true,
  "typescript.implementationsCodeLens.enabled": true,
  "typescript.updateImportsOnFileMove.enabled": "never",
  "javascript.referencesCodeLens.enabled": true,
  "terminal.integrated.fontFamily": "DejaVu Sans Mono for Powerline",
  // Vim config
  "vim.disableExtension": false,
  // What key should <leader> map to in remappings?
  "vim.leader": ",",
  // Option to delegate certain key combinations back to VSCode to be handled natively
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-f>": false,
    "<C-w>": false,
    "<C-c>": false,
    "<C-v>": false,
    "<C-b>": false,
    "<C-o>": false
  },
  // Remapped keys in insert mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.insertModeKeyBindings": [
    // bind jj to <ESC> in insert mode
    {
      "before": [
        "j",
        "j"
      ],
      "after": [
        "<Esc>"
      ]
    },
    {
      "before": [
        "k",
        "k"
      ],
      "after": [
        "<Esc>"
      ]
    },
    {
      "before": [
        "h",
        "h"
      ],
      "after": [
        "<Esc>"
      ]
    }
  ],
  // Non-recursive remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": [
        "H"
      ],
      "after": [
        "HOME"
      ]
    },
    {
      "before": [
        "L"
      ],
      "after": [
        "END"
      ]
    },
    // map : to show command palette
    {
      "before": [
        ":"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.showCommands",
          "args": []
        }
      ]
    },
    // ZZ save current file
    {
      "before": [
        "Z",
        "Z"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.files.save",
          "args": []
        },
        {
          "command": "workbench.action.closeActiveEditor",
          "args": []
        }
      ]
    },
    // <leader>w : save current file
    {
      "before": [
        "leader",
        "w"
      ],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.files.save",
          "args": []
        }
      ]
    },
    // <leader>c : uncomment/comment line
    {
      "before": [
        "leader",
        "c"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.action.commentLine",
          "args": []
        }
      ]
    },
    // vim multicursor select next match
    {
      "before": [
        "<C-n>"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.action.addSelectionToNextFindMatch",
          "args": []
        }
      ]
    },
    // vim multicursor like skip match
    {
      "before": [
        "<C-x>"
      ],
      "after": [],
      "commands": [
        {
          "command": "editor.action.moveSelectionToNextFindMatch",
          "args": []
        }
      ]
    }
  ],
  // Enable some vim ctrl key commands that override otherwise common operations, like ctrl+c
  "vim.useCtrlKeys": true,
  // Color of the search highlight.
  "vim.searchHighlightColor": "rgba(150, 150, 255, 0.3)",
  // Use system clipboard for unnamed register.
  "vim.useSystemClipboard": true,
  // Override VSCode's copy command with our own copy command, which works better with VSCodeVim. Turn this off if copying is not working.
  "vim.overrideCopy": true,
  // Non-recursive keybinding overrides to use for insert mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.insertModeKeyBindingsNonRecursive": [],
  // Width to word-wrap to when using gq.
  "vim.textwidth": 80,
  // Timeout in milliseconds for remapped commands
  "vim.timeout": 1000,
  // Number of lines to scroll with CTRL-U and CTRL-D commands.
  "vim.scroll": 20,
  // Show the text of any command you are in the middle of writing.
  "vim.showcmd": false,
  // keywords contain alphanumeric characters and '_'
  "vim.iskeyword": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
  // Ignore case in search patterns.
  "vim.ignorecase": true,
  // Override the 'ignorecase' option if the search pattern contains upper case characters.
  "vim.smartcase": true,
  // Enable the EasyMotion plugin for Vim.
  "vim.easymotion": false,
  // Enable the Surround plugin for Vim.
  "vim.surround": true,
  // Show all matches of the most recent search pattern
  "vim.hlsearch": false,
  // Show where a / search matches as you type it.
  "vim.incsearch": true,
  // How much search or command history should be remembered
  "vim.history": 50,
  // Indent code automatically.
  "vim.autoindent": true,
  // Start in Insert Mode.
  "vim.startInInsertMode": false,
  // In visual mode, start a search with * or # using the current selection
  "vim.visualstar": false,
  // Uses a hack to move around folds properly
  "vim.foldfix": false,
  // Use neovim on backend. (only works for Ex commands right now). You should restart VScode after enable/disabling this for the changes to take effect. NOTE: Neovim must be installed and neovimPath must be set the executable in order for this setting to work. Otherwise, vscodevim will crash.
  "vim.enableNeovim": false,
  // Path to run neovim executable. For example, /usr/bin/nvim, or
  "vim.neovimPath": "nvim",
}